version: '3.8' # Docker Compose 파일 형식의 버전. 높을수록 최신 기능 지원을 의미해.

services: # 이 섹션 아래에 우리가 실행할 각 컨테이너(서비스)들을 정의해.

  zookeeper: # 첫 번째 서비스: 주키퍼. 카프카 클러스터의 코디네이터 역할을 해.
    image: confluentinc/cp-zookeeper:7.5.0 # 사용할 도커 이미지 이름과 태그(버전). confluentinc는 카프카 관련 공식 이미지를 제공하는 곳이야.
    hostname: zookeeper # 컨테이너 내부에서 사용할 호스트 이름. 다른 컨테이너들이 이 이름으로 주키퍼에 접근할 수 있어.
    container_name: zookeeper # 컨테이너 이름. `docker ps` 같은 도커 명령어로 컨테이너를 쉽게 식별하고 제어할 때 사용해.
    ports: # 포트 매핑 설정: '호스트 포트:컨테이너 포트'
      - "2181:2181" # 내 컴퓨터의 2181 포트를 이 컨테이너의 2181 포트와 연결한다는 뜻이야. 이렇게 해야 내 컴퓨터에서 주키퍼에 접속할 수 있어.
    environment: # 컨테이너 내부에서 사용할 환경 변수들을 설정하는 부분이야.
      ZOOKEEPER_CLIENT_PORT: 2181 # 주키퍼 클라이언트가 접속할 포트
      ZOOKEEPER_TICK_TIME: 2000 # 주키퍼 내부 동작 시간 단위 (밀리초)

  kafka: # 두 번째 서비스: 카프카 브로커. 메시지를 실제로 저장하고 처리하는 핵심 서버야.
    image: confluentinc/cp-kafka:7.5.0 # 카프카 브로커 이미지
    hostname: kafka # 컨테이너 내부 호스트 이름
    container_name: kafka # 컨테이너 이름
    ports: # 포트 매핑
      - "9092:9092" # 내 컴퓨터의 9092 포트를 컨테이너의 9092 포트와 연결. 외부(스프링 애플리케이션 등)에서 카프카에 접속할 때 이 포트를 사용해.
    environment: # 카프카 환경 변수 설정
      KAFKA_BROKER_ID: 1 # 카프카 클러스터 내에서 이 브로커를 식별하는 고유한 ID. (지금은 1개만 띄워서 1)
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' # 주키퍼 연결 주소. `zookeeper`는 위에서 정의한 주키퍼 컨테이너의 호스트 이름이야.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT # 카프카 리스너의 보안 프로토콜을 정의해. 여기서는 단순 텍스트 통신(PLAINTEXT)을 사용한다는 의미야.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092 # 카프카 클라이언트가 접속할 수 있는 실제 리스너 주소를 알려줘.
      # `PLAINTEXT://localhost:9092` : 내 컴퓨터(호스트)에서 이 카프카 브로커에 `localhost:9092`로 접속할 때 사용.
      # `PLAINTEXT_INTERNAL://kafka:29092` : 도커 네트워크 내부의 다른 컨테이너(예: 나중에 만들 스프링 배치 컨테이너)들이 `kafka`라는 호스트 이름으로 이 브로커에 접속할 때 사용.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 컨슈머 오프셋을 저장하는 내부 토픽의 복제 팩터. (현재는 브로커가 하나라 1로 설정)
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # 트랜잭션 로그 복제 팩터
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # 트랜잭션 최소 동기화 복제본 수
    volumes: # 데이터 볼륨 마운트: '호스트 경로:컨테이너 경로'
      - kafka-data:/var/lib/kafka/data # `kafka-data`라는 이름의 도커 볼륨을 카프카 컨테이너 내부의 `/var/lib/kafka/data` 경로에 연결해. 이렇게 하면 컨테이너를 지워도 카프카의 데이터(메시지 로그 등)가 유실되지 않아.
    depends_on: # 의존성 정의: 이 서비스가 시작되기 전에 먼저 시작되어야 하는 서비스
      - zookeeper # 카프카는 주키퍼가 먼저 실행되어야 정상적으로 작동하므로 이렇게 설정해.

volumes: # 이 섹션에서 위에 `volumes:`에 사용된 이름을 가진 도커 볼륨들을 실제 물리적인 저장 공간과 연결되도록 정의해.
  kafka-data: # `kafka-data`라는 이름의 도커 볼륨을 생성.
  postgres-data: # `postgres-data`라는 이름의 도커 볼륨을 생성.
